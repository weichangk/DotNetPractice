.NET库创建异步程序,即反应扩展(Reactive Extensions,简称Rx)

01 将普通集合转换为异步的可观察集合
02 编写自定义的可观察对象
03 使用Subject
04 创建可观察的对象
05 对可观察的集合使用LINQ查询
06 使用Rx创建异步操作


之前我们已经学习过了,有好几种方式在NET和C#中创建异步程序。其中一个是基于事件的异步模式,在之前的章节中已经提及过。
引入事件的初始目的是简化观察者设计模式的实现。该模式常用于实现对象间的通讯。
当我们讨论任务并行库时,我们注意到事件的主要缺点是它们不能有效地相互结合。
另一个缺点是基于事件的异步模式不能处理通知的顺序。想象一下我们有IEnumerable<string>提供给我们字符串值。
然而当迭代它时,不知道每个迭代会花费多长时间。如果使用常规的foreach或其他的同步迭代构造方式,我们将阻塞线程直到得到下一个值,这可能会导致整个处理非常慢。
这种作为客户端从生产者那里拉取值的场景被称为基于拉取(pull-based)的方式。

相反的方式是基于推送(push-based)的方式,即生产者通知客户端有新值要处理。这将把工作推给生产者,而客户端在等待另一个值的时候可以做些其他事情。
因此,目标是实现类似于IEnumerable的异步版本的一个机制,可以生产一组序列值并按顺序通知消费者处理这些值,直到序列处理完成或抛出异常。
NET Framework从4.0版本开始包含了接口1Observablesout T>和IObserverkin T>的定义,它们一起代表了异步的基于推送的集合及其客户端。
它们都来自叫做ReactiveExtensions (简称Rx)的库,其由微软创建,用于使用可观察的集合来有效地构造事件序列,以及实际上任何其他类型的异步程序。
这些接口包括在.Net Framework中,但这些接口的实现类以及所有其他机制仍单独的分布在Rx库中。

Reactive Extensions起初是一个跨平台的库。.NET3.5, Silverlight以及Windows Phone都有相应的库。
甚至JavaScript,Ruby和Python都可以使用Reactive Extensions。
它也是开源的,你可以在CodePlex网站找到针对.NET的Reactive Extensions源码,也可以在GitHub找到其他实现。